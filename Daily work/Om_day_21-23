# Manim is a Python library for creating mathematical animations. Understanding and  solving difficult concepts of mathematics 
# like solving curve equations, volume, surface area problems can be made easy using manim which will visualize these concepts.

# Manim can be installed using pip(python package installer). Open terminal/command prompt and run the command : pip install manim.
# Along with installing manim, install additional packages like LaTex and FFmpeg from MikTex and Ffmpeg’s official websites.
# For verification of the library and packages, On terminal run the commands : 
# manim –version, latex –version, ffmpeg –version
# To Configure, create a file and write a simple python manim code and then open that file in terminal and run the command : 
# manim -pql file_name.py 
# Where pql is picture quality low, quality can be upgraded to pqh(high).
# After the command is executed, the animation video would be generated.
# Example of a manim script : 
# from manim import *    #manim library is being imported
# class Transform(Scene):   #Scene is container for animations
#     def construct(self):
#            circle = Circle()        #circle is defined
#            triangle = Triangle()    #triangle is defined 
#            self.play(Create(circle))      #this creates a circle
#            self.play(Transform(circle, triangle))     #this transforms the circle into triangle
#            self.wait(0.5)     #after the animation a waiting time of 0.5 seconds.

# Ex : 

# class Unique(Scene):
# def construct(self):

# hello_text = Tex("Hello World")
# square = Square().to_edge(DR)
# self.play(Write(hello_text))
# self.play(hello_text.animate.shift(UR * 3))
# self.wait(0.4)
# self.play(Create(square))
# self.wait(0.5)

# axes = Axes(x_range=[-3,3], y_range=[-2,2], axis_config={"color":WHITE}).to_edge(LEFT)
# graph = axes.plot(lambda x: np.sin(x), color=RED)
# self.play(Create(axes))
# self.play(Create(graph))
# self.wait(0.6)
# self.play(FadeOut(hello_text, square, graph, axes))
# self.wait(0.4)

# Simple Shapes can be created by the predefined classes and can also be modified, for example :
# square = Square(side_length = 3, stroke_color = WHITE, fill_color = BLUE, fill_opacity = 0.5)
# triangle = Triangle(fill_color = GREEN, fill_opacity = 0.75)
# circle = Circle(radius = 4, stroke_color = GREEN, fill_color = YELLOW)
# rectangle = Rectangle(width = 4, height = 3, fill_color = RED, fill_opacity = 0.9)
# roundrect = RoundedRectangle(height = 2.5, width = 3, stroke_color = PINK)

# Animating the Shapes include creating them, transforming one shape to another, moving them from one position to another, for example : 
# circle = Circle(radius = 2, fill_color = GREEN, fill_opacity = 0.4)
# square = Square(side_length = 3)
# self.play(Create(circle))
# self.play(Transform(circle, square))
# self.play(square.animate.shift(UP * 2))
# self.wait(0.5)
# self.play(Fadeout(square))

# Transformations and animations include transforming one shape into another shape using transform and replacement transform methods 
# in which replacement transform method is faster than the ‘transform’ method. Ex : 
# circle = Circle()
# square = Square()
# self.play(Create(square))
# self.play(ReplacementTransform(square, circle))

# Other animations include rotating the shapes, changing colors…
# self.play(Rotate(square, angle=PI/6))
# self.play(square.animate.set_fill(BLUE))

# Texts are easy to incorporate in manim using Text, Tex, MathTex functions..
# Ex : 
# Simple_text = Text(“Hello World”)
# hello_text = Tex(“Namaskaram”)
# Maths_text = MathTex(r”y = x^2 + x^3”)
# Integration = MathTex(r”\int_{1}^{4} f(x) \, dx”)
# self.play(Write(simple_text), Write(hello_text), Write(Maths_text), Write(Integration))
# for including certain symbols like !,? you can’t rely on Text function we need to use Tex with dollar($) sign, 
# ex : Tex(“What is your name $?$), Tex($x = 5$)
