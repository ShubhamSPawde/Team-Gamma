// Matplotlib is a comprehensive library for creating static, animated and interactive visualizations in python.

// Example : fig, ax = plt.subplots()
//                  ax.plot([10, 20, 30, 40], [12, 24, 15, 30])
//                  plt.show()                  
                                                                         
// The figure is the whole plot you see.It keeps track of axes, titles, figure legends, colorbars and nested subfigures. 
// subplots() are functions which create axes object inside figure, which can be added manually also.
// An Axes is an Artist attached to a Figure that contains a region for plotting data, usually contains two or three axis objects.
// Axis objects set the scale and limits and generate ticks and tickables.
// Artist is everything visible on Figure like axes, axis objects which include text objects, Line2D objects, collection objects etc. 
// Two ways of using Matplotlib : 
// 1.	Object-oriented style – explicitly create figures and axes.
// Ex : import matplotlib.pyplot as plt 
//        import numpy as np
//        x = np.linspace(0, 10, 100) #100 evenly spaced value from 0-10
//        y = np.tan(x) #tan of each value in x
//        fig, ax = plt.subplots()
//        ax.plot(x, y)
//        ax.set_xlabel(‘x axis’)
//        ax.set_ylabel(‘y axis’)
//        ax.set_title(‘A Graph’)
//        plt.show()
// 2.	Implicitly create and manage figures and axes, and use pyplot functions for plotting.
// Ex :  Same as above after declaring x & y 
//          plt.plot(x, y)
//          plt.xlabel('x axis') 
//          plt.ylabel('y axis') 
//          plt.title('A Graph') 
//          plt.show()

// Techniques for customizing plots using with titles, labels and legends : 
// Title – subject of the graph
// Label – labels or gives name to x, y axes and many such things which need a description.
// Legend – labels different element of the plot, which can help distinguish between multiple datasets or plot elements.

// Ex : 
// import matplotlib.pyplot as plt
// import numpy as np

// x = np.linspace(0, 10, 100)
// y1 = np.sin(x)
// y2 = np.cos(x)

// plt.plot(x, y1, label='Sine Wave') #labeling legend y1
// plt.plot(x, y2, label='Cosine Wave') #labeling legend y2

// plt.title(‘Sine vs Cosine’) #this title  will be on top of the figure(subject of plot)
// plt.xlabel('x axis') #labeling x axis
// plt.ylabel('y axis') #labeling y axis
// plt.legend() #enables addition of legend to distinguish between sine & cosine
// plt.show() 
// adding title, labels, legends make the plot more descriptive and understandable.

// Besides creating axes object inside figure, subplot() function are also used to create multiple plots in a figure. 
// Ex : 
// import matplotlib.pyplot as plt
// import numpy as np

// Sector = ['IT', 'Pharma', 'FMCG', 'Banking', 'Energy']
// Revenue = [5000, 2520, 3000, 1700, 4100]

// Sector = ['IT', 'Pharma', 'FMCG', 'Banking', 'Energy']
// Revenue = [5000, 2520, 3000, 1700, 4100]
// plt.figure(figsize=(12,6))

// plt.subplot(1,2,1)
// plt.bar(Sector, Revenue, color='Orange', linewidth = 1.5)
// plt.title('Sector vs Revenue')
// plt.xlabel('Sector')
// plt.ylabel('Revenue')

// max_value = max(Revenue)
// max_index = Revenue.index(max_value)
// max_sector = Sector[max_index]

// plt.annotate(f'Highest: {max_value}', 
//              xy=(max_index, max_value), 
//              xytext=(max_index, max_value + 500), 
//              arrowprops=dict(facecolor='black', arrowstyle='->'),
//              ha='center')

// plt.subplot(1,2,2)
// plt.pie(Revenue, labels=Sector, autopct='%1.1f%%')
// plt.title('Sector vs Revenue')

// plt.tight_layout()
// plt.show()

// Advance plotting techniques including adding text, using arrows, 3D graphs, etc.
// Ex : 

// import numpy as np
// import matplotlib.pyplot as plt
// from mpl_toolkits.mplot3d import Axes3D

// _x = np.arange(4)
// _y = np.arange(3)
// _z = np.arange(6)

// _xx, _yy, _zz = np.meshgrid(_x, _y, _z)
// x, y, z = _xx.ravel(), _yy.ravel(), _zz.ravel()

// top = x * y * z
// bottom = np.zeros_like(top)
// width = depth = height = 1

// fig = plt.figure(figsize=(10, 7))
// ax = fig.add_subplot(111, projection='3d')

// ax.bar3d(x, y, bottom, width, depth, top, shade=True)

// ax.set_xlabel('x axis')
// ax.set_ylabel('y axis')
// ax.set_zlabel('z axis')

// ax.view_init(elev=20., azim=-35)

// plt.title('3D Bar Plot')
// plt.tight_layout()
// plt.show()

// Matplotlib provides several tools to create interactive plots that respond to user inputs, which enhances data visualization allowing 
// users to explore data dynamically.
// Key interactive elements include Sliders, buttons, check buttons, radio buttons, text boxes…

// For various different plots : https://colab.research.google.com/drive/1iVBXgUH6CHcWeGFfCT1oRU1vp749cYe0?usp=sharing