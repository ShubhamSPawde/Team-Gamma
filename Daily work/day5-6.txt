Git is a version control system that you download on your computer. It is essential that you use Git if you want to collaborate with other developers on a coding project or work on your own project.

it is a very usefull full,such that if you are 10 people working on a project then all of them can make there branch and work on the project indivitual on their branches without altering the main

there is a platform ,GitHub that allows you to host your Git projects on your account ,on a remote server, it is like a hosting platform

Git repository:-
The repository is the .git folder inside our project folder. It will track all the changes made to the files in our project and record that history over time.we can push our local repo in one of the remote servers like the github,etc.. and then the repo in it is refered as a remote repo

if any developer wants to work with us on a project then they can clone the repo into there device from the hosting service like the github and then create their own branch in it such that they can work in their device on their branch not effecting the main and then can push their work and generate the pull request to add to the main , their work.
in a project with multiple developers, each one has a local repository on their computer. And there is one remote repository that they all contribute to and they use it to share their work.

what is a branch,then?



How can we save the changes?
you can do commit
A commit is a version of your project. It represents a standalone version of your project and has a reference to all the files and folders that are a part of that version. 

there are the steps to add an existing project to a Git repository using the command line:
Initialize the repository: Run the command git init.
Add files: Run the command git add . or git add --all to add the files to the local repository.
Copy the URL: Copy the remote repository URL from GitHub.
Add remote URL: Run the command git remote add origin <remote repository URL> to add the URL for the remote repository.
Push changes: Run the command git push origin master to push the changes to GitHub. 





Git provides powerful tools for branching, merging, and resolving conflicts, which are essential for collaborative software development. Here's a summary of the key techniques:
Branching
*git branch <branch_name>: Creates a new branch from the current commit.
*git checkout <branch_name>: Switches to the specified branch.
*git checkout -b <branch_name>: Creates a new branch and switches to it.
*git branch -d <branch_name>: Deletes a branch.
Merging
*git merge <branch_name>: Merges the specified branch into the current branch.
*git merge --no-ff <branch_name>: Creates a merge commit even if a fast-forward merge is possible.
*git merge --abort: Aborts the merge process, reverting to the state before the merge began.
Conflict Resolution
Identify conflicts: When a merge conflict occurs, Git will mark the conflicting areas in the affected files.
Edit files: Open the files in a text editor and manually resolve the conflicts.
*Mark resolved files: Use git add <filename> to mark the resolved files.
*Commit the merge: Use git commit to create a merge commit.
Other Useful Techniques
git rebase: An alternative to merging that allows you to integrate changes from one branch into another by rewriting history.
*git cherry-pick: Applies a specific commit from one branch to another.
*git stash: Temporarily saves changes that are not ready to be committed.
*git diff: Shows the differences between commits, branches, or files.
*git mergetool: Opens a visual merge tool to help resolve conflicts.

